PERQemu "experiments" branch ChangeBlog


Summary of changes on the development branch since the v0.6.5 interim release.
Previous notes moved to ChangeLog-Old.txt.


March, 2025:

    3. Cleanup and snapshot of the RasterOp fix.  Push for platform testing.
    Bump to v0.6.9 because yeah, you only grow old once but you can be immature
    forever.

    2. Single-step countless RasterOps through the simulation, rewrite the code
    n ways, check and double check the PROM dumps and schematics, stare bleary
    eyed and mystified at nonsensical results and wonder about my life choices.

    Three days later:  Oh.  The test program was calculating the x coordinate
    incorrectly for the only test that consistently failed.  I fixed the actual
    RasterOp bug a week ago. <facepalm/>

    1. Completed a mortgage refinance that probably took 10 years off my life.
    Wells Fargo is a criminal organization and I am finally well clear of them.
    Trying to actually breathe again and pick up where I left off:  RasterOp
    rewrite and testing. 


February, 2025:

    3. Wrote an entire RasterOp simulator and worked out the deep mysteries of
    the RTI, RSC and RDS PROMs.  Having finally unraveled this, I suspect a
    Vogon contstructor fleet is gathering in orbit.
    
    2. Work sidetracked by another plunge down the rabbit hole into the murky
    depths of the RasterOp machine.  PNX visual glitches unearthed an obscure
    bug that, rather than patching through a PROM update, motivated me to look
    again at the implementation... which I hadn't messed with for 7 YEARS!?
    Refactored the RasterOp pipeline and bumped RSC03 to RSC04, rewrote the
    edge table to correct the glitches, and updated the Perl hacks used to
    build it.  Bumped PERQemu to v0.6.7 to reflect the changes.

    1. Reworked and updated DMA register address frobbing (simplified for EIO).
    Implemented Q-code breakpoints added a MachineStateChanged event to properly
    pause execution through the ExecutionController (fixing the earlier buggy,
    rushed implementation).


January, 2025:

    4. Finally revisited the CPU Victim register implementation, and after more
    careful study of the schematics corrected the emulation to be more faithful
    to the actual hardware.  This has eliminated the need for the PNX "DDS 142"
    boot bug (although their 16K VFY test code is still janky as hell and may
    not actually test what they think it does).  The microcode patch that was
    slapped together for earlier PNX versions has been removed.  PNX 5, however,
    has some sort of video or RasterOp problem, where characters are randomly
    painted incorrectly and the kernel drops into the debugger shortly after
    boot.  This may be a bad boot floppy?  Investigation underway.  A couple of
    small bug fixes to correct the previous commit (something that compiled on
    Xamarin Studio threw an error on VS2022, first time that's happened).  This
    should build correctly.

    3. Updated the video display handling so that the floppy activity icon is
    now visible during slow floppy boots.  It's pretty subtle so you might not
    notice it.

    Also:  POS G.85 booted from floppy.  Don't have full installation media or
    any sources (dang) but may have a tape image to load.  This one is super
    rare.  PNX 3 installation dead in the water, as most of the floppies
    are missing cylinder zero.  This is typical for POS floppies, but PNX DOES
    actually use that track -- so we won't get a PNX 3 image until the original
    diskettes are re-scanned.  Bummer.  It has demos?  Working on PNX 5 boot
    issues (bad VFY test).  Plus, made some progress on 24-bit support just
    because I was in the mood to fool around a little.  Got way farther than
    expected!  Actually was able to run an Accent S6 image (20 bit) on the 24-
    bit CPU with working DMA (but a video glitch that needs investigation).
    All of this is definitely NOT procrastination, no way, not at all.  Nope.

    2. Fixed the floppy DMA handling that was causing grief with the EIO Z80.
    This is a testing snapshot to try out some other small fixes (24-bit) and
    incorporate some PERQmedia tweaks that help with loading dodgy POS floppies.
    Bumped the UserGuide.pdf as well.  Still working toward building a couple
    of Micropolis and MFM disk images with demos and games and goodies as well
    as other fixes for a v0.7.x release.  Real Soon Now.  Really.

    1. Bumped the copyright notices and version number to v0.6.6 to snapshot at
    the start of the new year.  Reassessed and reviewed the state of the world
    (sheer horror) and the code base (looking up) and am resolved to get to v1.0
    before the year is out, or die trying.


---
Last update: skeezics    Tue Jan 14 22:57:46 PST 2025
