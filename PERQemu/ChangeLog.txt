PERQemu "experiments" branch ChangeBlog


Summary of changes on the development branch since the v0.5.0 release.  Previous
notes moved to ChangeLog-Old.txt.  New entries here will be added at the top, to
avoid wasting precious time scrolling to the end. :-)


November, 2024:

    4. Added support for the floppy ReadID command.  POS G and Accent support
    this but I can't find any code that uses it; it's possible that some obscure
    utility for duplicating floppies might try to read the interleave pattern
    by issuing a series of ReadID commands and noting the sector address marks
    as they go by.  For now, PERQemu/PERQmedia just flattens out the interleave
    on all disk types, but that could be an interesting enhancement to add in a
    future release.  (Disk accesses are probably still a wee bit too fast in
    emulation.)

    Also, Micropolis 8" disk formatting now seems to work.  Still some general
    EIO hard disk tweaks and testing to do before I'm satisfied it's ready for
    a release build, but with some new pre-built images (8" and 5.25") and User
    Guide updates I hope to push out a new release before the end of the year.
    Bumped version to v0.6.4 and pushed for platform testing.

    3. Implemented the i8254 (mode 3) for EIO baud rate generation.  The PERQ
    doesn't use most of the features of this chip so I didn't go crazy -- just
    a shell to capture and pass along baud rate updates.  Pushed for platform
    testing.

    2. Al Kossow is graciously hosting the massive trove of PERQ floppy images
    that he, Josh Dersch and others have archived over the years.  These are
    the images as scanned in IMD format, with their original names, but with
    most duplicates and incomplete/defective images removed.  All of the old DMK
    format images from Bitsavers were converted to IMD to make them more readily
    usable with a GoTek floppy emulator on the real PERQ hardware.  Nearly every
    image has at least a text label to help identify the contents.  See the PERQ
    section at bitsavers.org.  NOTE:  Over time I'll be curating complete media
    sets for each OS, major applications, demos, fonts and games, documentation
    and interesting experimental stuff and organizing it in PRQM format on the
    PERQmedia Github repository.  These will be verified and tested, with some
    extra documentation about their contents with installation notes, etc.

    1. ACK!  Time sure flies when you're waiting for civilization to collapse.
    In the meantime, updated the MFM disk controller to get low-level format
    operations to work, even though it's not strictly necessary to ever do that
    with PERQemu.  But it makes the emulation more complete.  Tested with dual
    Maxtor XT1140s under POS and Accent.  Also streamlined the S/N reporting
    and made a few more small tweaks to turn down the debug spewage from the
    hard disk controller.  Micropolis still not quite all there but good enough
    for daily use.  Still working on assembling some new pre-built images so
    the PERQ 2 configurations can be used out of the box.  Watch this space.


August, 2024:

    4. Adjust the seek timing to be a bit more realistic.  While a linear ramp
    isn't great, it's better than the cheesy hack I threw in originally.  Also
    start to streamline and clean up debugging output in the Microp and MFM hard
    disk controllers as testing/debugging shows they're behaving pretty well and
    might be interim-release-ready soon.  More tinkering and testing to do!

    3. A small thing: add the backplane serial number PROM decode to the EIO so
    that PERQ-2 systems can query it.  Didn't really know much about this before
    but Docs\Hardware References\serial.memo spells it out pretty clearly.  The
    old "fewer than 4500 PERQs were made" claim often floated is partially sup-
    ported by the note that S/N 5787 (decimal) was possibly the highest logged
    by manufacturing by 1985 when PQS was in their death throes and handing off
    hardware rights to Varityper.  A curious bit of history is all.  In POS G,
    the DETAILS program will display the system S/N on a PERQ-2.  Note that this
    is also the low 16 bits of the Ethernet address. :-)  PERQemu now generates
    random Ethernet MAC addresses in the range 5800..65534 so that virtual PERQs
    won't collide with real PERQs on your network, unless you explicitly set the
    low word (to use software "node locked" to a particular S/N).

    2. Fixed the MFM disk controller to assert the SMInt status bit at the right
    times; slight difference in behavior from the Micropolis controller.  Some
    synchronization issues throw warnings but the T2 with MFM disks is now able
    to boot POS and Accent.  Testing of dual-drive configurations in progress.

    1. Bumping PERQemu to v0.6.2 to reflect some PERQmedia library patches that
    improve the ability of PERQemu and PERQdisk to read partial and/or corrupted
    floppies in IMD format.


July, 2024:

    1. Catalogued and organized over 900 floppy images.


June, 2024:

    2. MFM disk support coming on-line.  Can now configure up the PERQ-2Tx type
    chassis and attach one or two 5.25" disks!  As with the 8" Micropolis, the
    low-level formatting support isn't debugged and dual-disk operation is not
    fully exercised but initial indications show that OS installation tools are
    able to prepare MFM disks for use.  Bumping version to v0.6.0 for debugging
    and initial platform testing.

    1. Called away IRL to deal with the whole stupid "not going broke" thing but
    trying to sneak in development time around the edges.  Merging the interim
    alpha-/maybe-beta-quality PERQ-2/EIO/Micropolis code into main as a snapshot
    before leaping into the multiple-drive capable MFM hard disk controller and
    further PERQ-2 development/refinements.  User Guide way out of date and no
    pre-built Micropolis disk images included, yet.  Calling this v0.5.8, on the
    way to a proper v0.6 or v0.7 release when documentation/bugs/MFM catch up.


May, 2024:

    6. A few key mapping updates for the PERQ-2 VT100 layout: adding a few extra
    keys that aren't on the actual PERQ keyboard but are present on modern ones,
    I figure sending the expected thing rather than having no response at all is
    the better choice.  I really do want to figure out a clean, simple, cross-
    platform way to allow setting host-to-PERQ keyboard mappings (at least for a
    handful of special keys).  For now, hacking UI/SDL/KeyboardMap.cs is the way
    to change or add your own custom keyboard settings.

    5. Some cleanups and small tweaks: fixed Yet Another strange PNX video issue
    so now PNX 3 can drive the display properly.  So close, guys.  So close.

    Finally got around to fixing the DDS update in the Console title bar that
    would glitch out some terminal emulators, removing the awful sleep() hack.
    Now when POS G boots the poor VM doesn't grind to a snail's pace waiting on
    the main thread to loop updating the DDS.  Still have to debug why the new
    PERQ-2 serial keyboard isn't properly transmitting certain control codes,
    like the SAPPHIRE prefix key.  Hope to have some new PERQ-2 configurations
    with pre-loaded Micropolis disk images assembled soon for an interim release!

    4. Ethernet and GPIB fixes for EIO.  Bitpad tracking now works, and the Null
    and 10Mbit Ethernet drivers are properly returning the MAC address bytes,
    updated and "simplified" for both OIO and EIO.  But do not attempt to reason
    with the Ethernet logic or understand how and why the low octets of the MAC
    are scattered about like the Elemental Stones.  Ethernet is crying out for
    a refactoring to eliminate some duplicated code, and there is still a ton
    of work to do here.

    3. Applied a patch to allow PNX to boot on the 16K CPU without manually
    hacking around the Vfy microcode bug.  The emulator now patches the Victim
    test automatically so PNX 2 (and 3) boot without intervention.  Also fixed
    the Kriz tablet, which on EIO apparently does not invert the data (as it
    does on IOB/CIO).  Investigating GPIB/BitPadOne problem on EIO and looking
    at Accent S6 network initialization hanging when the Null Ethernet driver
    is in use.

    2. Bump to v0.5.8 to celebrate a successful installation of Accent S6 (needs
    Amendment floppies loaded) and PNX 2 -- both OSes are able to load Z80 code
    at boot time and execute from RAM.  PNX 2 even sets the clock using the RTC?
    Still plenty of debugging to do and lots of cleanups and loose ends, but the
    PERQ-2 support is finally happening!  This paves the way for a ton of fun
    future projects.

    1. PERQ-2/Microp/EIO floppy boot for POS G.6 now reaches 999 and gets to the
    shell prompt!  Weeks of beating my head on single stepping disassembed Qcode
    yielded the "aha!" moment that write-protecting the boot floppy fixes the
    annoying crash that had stalled the process at LoadZ80 (a red herring).
    Fixes to the Micropolis driver and additional debugging info.  PNX 3 will
    require its own video workaround (or modification of the PNX 1/PNX 2 hacks)
    because they did it _another_ different, non-standard way, hoorah!  Sigh.


April, 2024:

    3. Floppy boot on PERQ-2/Microp/EIO config reaches 970!  FIFO/interrupt/Z80
    protocol handling is finicky and making sure the Z80 and PERQ see the right
    interrupts in only the right situations is still slightly elusive.  The POS
    init code doesn't seem to handle the floppy boot case very intelligently,
    since it gets very unhappy when there's no ZBoot file on the boot partition
    (as is the case booting from single density floppies - not enough room).
    Sloppy, guys.  Workaround needed for PNX to get around a genuine bug in the
    VFY MakeVictim test on the PNX2 and PNX3 boot floppies.

    2. Added rudimentary Z80 breakpoint support (instruction or memory address
    monitoring).  Used it to find the elusive/undocumented behavior of the DMA
    chip (and diagnosed a bug/weakness in the Z80 semaphore wait/signal code),
    and updated the Ethernet drivers (Ether10Mbit and NullEther) to handle the
    EIO port assignments.  Now the floppy boot gets to DDS 416 and clears the
    screen but hangs in GPIB intialization; likely the TMS9914 implementation
    needs a few tweaks for EIO (plus support for DMA "HiVol" operation!).

    1. So, so close to initial floppy boot on the PERQ-2/Micropolis.  Tracking
    down a really obscure condition where the Z80 doesn't properly ack the final
    floppy block read when loading the Mboot file, so the PERQ times out (still
    at DDS 158).  To assist with this, took the time to reconstruct and reformat
    the entire EIO Z80 ROM source code in PERQemu's debugger format.  (CIO will
    eventually get this treatment too, since it's a much, much more readable
    code base than the original old/IOB Z80.)  Check out PROM/eioz80.lst if you
    want to learn more about the cooperative multitasking the Z80 does to run
    the low-speed I/O devices on the EIO board.


March, 2024:

    9. Fixed some subtle Z80 IRQ and DMAC bugs and now PERQ-Z80 memory transfers
    through the DMA FIFOs are kinda working.  Floppy boot dies at DDS 158 but it
    is getting closer... made the boot key press more reliable (EIO Z80 takes a
    bit longer to start up and it was missing the keypress events).
    
    8. All kids love Log.  Rework the debug file rotation since pushing it too
    hard with a TON of debugging output turnt up kept hard crashing Mono, so I
    had to address the thread crap (AND NO, IT STILL AIN'T RIGHT) but as long as
    it grinds out the info I need to pinpoint where the PERQ-2 boot process is
    binding up I'll call it a win. :-P  Speaking of which, PERQ-Z80 DMA device
    added, refinements to the Z80 interrupts/DMAC, more bit fiddling to get the
    finicky floppy boot sequence to complete... inching closer to a potential
    bare metal POS G install on a PERQ-2/8" Micropolis.  Snapshot to checkpoint
    progress and for regression testing on Windows/Linux.

    7. Update the PERQ<->Z80 FIFOs to use a regular lock to protect from cross-
    thread access (like the IOB/CIO latches, the EIO FIFOs talk to both CPU and
    Z80).  Rework/expand/correct some finer details of the Am9519 and i8237,
    plus a small EIO fix for the floppy.  Um... attempted floppy boot of a PERQ2
    Micropolis configuration now makes it to 157 on the DDS.  Holy crap! :-)

    6. Plumbed in most of the i8237 DMA chip and created the special PERQ DMA
    hardware.  This is a _second_ set of FIFOs that allow memory-to-memory
    transfers with no CPU intervention.  Add some debug commands to improve
    visibility into the DMAC internals and hard disk drivers.

    5. Micropolis 8" DIB showing signs of life: first little green shoots of
    PERQ-2 support pushing up through the ground.  Am9519 is fielding Z80 IRQs,
    the updated PERQ/Z80 FIFOs seem to be exchanging data, and the VT-100 style
    keyboard is passing keystrokes through the SIO (even without the i8254 PIT
    implemented :-).  Have to get the i8237 DMA chip working and hook up the
    weird PERQ-Z80 DMA so I can attempt a floppy boot and try to format a new
    8" Micropolis for the first time.  Bump version to v0.5.6 and snapshot.

    4. Some random improvements along the way: in POS if you copy a file to RSX:
    and forget to specify the destination filename, PERQemu creates a temp name
    in the default Output directory.  Other minor tweaks and fixes have somehow
    yielded an unexpected performance jump of around 4-5fps on my ancient Mac.
    Not sure how or why, but I'll take it!  Updated the GPIB controller to take
    in the two extra Z80 I/O addresses that are unique to the EIO; for now they
    are no-ops to silence "unhandled write" warnings.

    3. Starting on the i8237 (aka Am9517) DMA controller, and the i8254 PIT
    (timer chip that replaces the Zilog CTC on EIO).  Minor modifications to let
    the serial devices and SIO talk to the PIT (using the same interface).  Also
    a minor update to the GPIB controller for EIO (no new functionality).

    2. Have put some meat on the bones of the Am9519 and worked out how to route
    interrupts on the EIO, and it's pretty reasonable.  EIO boots to DDS 013 so
    basic initializations work; lots of work to get the FIFOs, DMA and hard disk
    (Micropolis, MFM) going.  Some cleanups to mitigate/fix lingering Execution
    Controller bugs or annoyances.  Similarly, small change to the HighResTimer
    to avoid a silly thing (like the ancient Unix "cron" bug).

    1. A number of small tweaks to get back into PERQ-2.  Studying the Am9519
    and starting to flesh out the EIO's Z80 interrupt scheme.


February, 2024:

    4. Small Ethernet, DMA tweaks plus a few guardrails on the Canon driver to
    keep a mismatch between the selected printer and the compiled PERQ software
    from blowing chunks.  Rebuilt the Canon utilities from scratch for POS F.15
    and updated the included hard disk images so that printing works out of the
    box; an "Amendment 2" will be pushed to the PERQmedia archive too.  Other
    OS images will be updated as I have time to build CPrint and install/test
    it.  Since I'm calling this a pre-release, and it's been almost exactly a
    year since v0.5.0 rolled out, time to push the button and turn it loose.

    3. Updates to the User Guide and other documentation and some final tweaks
    and fixes to get Canon output working pretty reliably.  Tested with Accent
    CPrint too.  Working to clean-up and integrate the special POS F.15 build
    so the bundled image can be updated to include Canon printing, as well as
    updating the other POS G disk images so more configurations can laser print
    "out of the box."  Also added some "visual sugar" (activity icons) for the
    Canon to show when the printer is busy.

    2. The CLI "save screenshot" command works again.  The default output format
    is PNG so the compressed 1bpp screen capture is very compact.  The Canon can
    now produce multi-page TIFF files!  These (large) files can be converted to
    compressed PDFs using "tumble" as recommended for archival on Bitsavers.
    Once bugs are shaken out and a visual progress indicator is added an interim
    v0.5.5 update will be released with an updated User Guide.

    1. Canon printing is pretty solid; worked out most of the quirks of the
    print engine and controller so that the test software (on POS F.15) can
    produce output at 240- or 300-dpi reliably, in PNG or TIFF (uncompressed)
    formats.  Refactoring so that the output drivers can be used for other
    printer emulations and screenshots too!  (Yes, the bitmaps are inverted,
    for now.)


January, 2024:

    6. Holy crap, laser printing seems to work.  LOTS of testing and tweaking to
    do but I got a screendump to print and CPrint almost output a proper listing
    (though the margin is shifted improperly).  Interim check-in for pushing the
    code to other machines for testing.

    5. Hooray, Github just stopped working with my browser on El Capitan, with
    zero warning.  At least Google Docs is giving a warning that Firefox ESR 78
    is no longer supported _but the site still works_.  So now I really do have
    to finally migrate all of my crap to (at least) High Sierra on my iMac, for
    as long as that lasts.  Pointless churn FTW.  Anyone with an old PowerMac5,1
    out there who's looking to donate or trade?  Being flat broke is officially
    NO goddamned fun.

    4. Have almost worked out the arcane workings of the Canon controller and
    print engine, although it's quirky as hell and currently very spongy.  It
    seems to fool POS into thinking that the output went somewhere, so now I
    have to make SDL do something reasonable (or punt and just write the PNG
    file directly, without SDL2's stupidities and limitations in the way).
    Or I could just write a 2700 column wide x 3300 line text file to see if
    the bitmap looks like an image!

    3. Update the NullEthernet device to use the DMA registers (fixed a small
    regression that affected POS G on CIO).

    2. So, the Canon got to the point where it wanted to use the IOB DMA regs
    to set up a transfer, and it rudely reminded me that that had never been
    implemented.  Whoops.  So I went berzerk and slapped a thing together to
    handle all the DMA channels on both IOB/CIO and EIO and pulled a lot of
    duplicated code out of the Shugart, Ethernet and Canon controllers.  It's
    not pretty.  It's probably all wrong.  It's very weird.  But I'll push it
    over to the test box and run it for a few hours to see if it's stable and
    get back to the laser interface.

    1. Reverse engineered the Canon PROMs and started working through the bugs
    in the schematics and moderately horrible documentation to bring up a bare
    bones interface.  For testing, ported the software suite to POS F.15 (since
    that's the best documented source code base that I'm most familiar with)
    but it should work with POS G and Accent too.  Settings added to select
    printer model (LBP-10 or CX) and default paper size (anything you like, as
    long as it's US Letter).


December, 2023:

    2. Roll the copyright date to close out a frustrating year.  I have high
    hopes for completing PERQ-2 support in 2024, prior to the final collapse
    of civilization.  We all gotta have goals, right?

    1. Add a skeleton for starting the Canon laser printer interface.  This is
    a universal option for PERQ-1 (OIO) or PERQ-2 (OIO, MLO).


October, 2023:

    1. Minor refactoring of the Z80 Run() loop to account for EIO differences.
    Still distracted by RL and didn't want to leave uncommitted changes laying
    around.  Hope to get back to active development before year end?  Sigh.
    

August, 2023:

    1. Another tiny baby step toward EIO/PERQ-2 support: can instantiate EIO
    configs.  Incomplete/untested: RTC chip implementation; restored PERQ<->Z80
    FIFO code; PERQ-2 VT100-style keyboard mapping.  Long, long way to go...


July, 2023:

    3. Tentatively starting to explore what it will actually take to add EIO
    and PERQ 2 support.  The first hurdle is refactoring the Z80System into old
    (IOB/CIO) and new (EIO) versions.  This introduces a small performance hit
    (about 1fps or less?) but after chopping at it for a couple of hours we at
    least seem to still be able to run existing configurations.  Now there's a
    bunch of new controller chips to write and a mountain of Z80 code to comb
    through to figure out all of the EIO's mysteries and subtleties...

    2. Fix two small bugs: don't try to shut down the OIO board if one isn't
    configured; extend the PNX 1 video hack so that PNX 2 can now refresh the
    display properly.

    1. Trying to get back into the swing of things.  Small adjustment to the
    Ethernet reset code improves things a bit; still some funkiness possibly
    due to the complexity of my home network.  Anyone testing this code will
    probably find more success with two emulators talking over a private hub
    or switch with as little extra traffic as possible; much of the early PERQ
    software was extremely fragile, so a noisy modern TCP/IP network can easily
    overwhelm software from the era of "stone tools and bearskins".  The Accent
    IPAddrServer, AuthServer, Speak/Listen and FTP are communicating, while
    transparent network filesystem access is hit or miss, but this is progress.
    Still a LOT of work to make Ethernet reliable but it'll be pretty darn cool
    once it's there...


April, 2023:

    1. Radio silence - fell off the map due to financial difficulties requiring
    attention elsewhere.  Hope to return to PERQ development soon.  There is SO
    much cool stuff still being unearthed in the archives, and I really want to
    continue working on the emulator; getting EIO support in place will let me
    finish development of a real-time clock chip programming board for updating
    real PERQs (hardware is done, software TBD).  I also really don't want to
    end up bankrupt and/or homeless, so that's consuming my time for now. :-|

    If I wasn't such a cynic or had the constitution to engage in "social media"
    at any level, I'd say please visit https://buymeacoffee.com/skeezicsb...


March, 2023:

    3. WOO!  Ethernet is now ACTUALLY happening.  Still pretty raw, but packets
    are now flowing: first successful POS FTP transfer, echo test with POS
    diagnostic program "TestEther", and even Accent is sending Speak/Listen and
    Sesame (remote filesystem!) traffic.  Super early, and nowhere close to
    ready for "production", but the basic mechanism works.  So stoked.  Chuffed
    to bits.  Tickled pink.  A little bit giddy, even. :-)

    2. Provide a crude patch to map Turkish characters to UTF-8/ASCIIish so the
    CLI can parse 'i' and 'I' (in their various forms).  In the longer term,
    moving toward more awareness of and better handling of non-US/English input
    locales and (in a future GUI!) possibly even language translations would be
    great, to help spread the PERQ love globally. :-)

    1. Ethernet is kind of happening.  In the first cut, it's a purely low-level
    "raw" interface that runs in promiscuous mode so the PERQ can drive it as
    close to its own view of the hardware as possible.  This is cool, since it
    can run XNS, IPv4, and various undocumented/proprietary protocols and the
    direct packet mashing is relatively easy.  However, it requires elevated
    privileges (root/administrator) and... that ain't great.  In progress.
    

February, 2023:

    5. Real Ethernet support is taking its first baby steps!  It's still fragile
    and needs a ton of debugging.  The older versions of PacketDotNet/SharpPcap
    that work with net48 are rather out of date, but the newer versions (which
    claim to support both .NET Framework 4.8 and .NET Core apparently just lie.
    Mama said there'd be days like this.

    4. Found and fixed an esoteric microcode bug in POS F.15 and rolled that up
    with the GPIB, RSX: fixes into an "Amendment 1" release (posted with a full
    floppy set to the PERQmedia repo).  Updated the bundled f15 and f15dev.prqm
    images in Disks/.

    3. Start adding the framework for Ethernet support.  Bumped version to
    distinguish from the abortive Micropolis effort.

    2. Fixed some small bugs that allowed PNX 2 to install itself and built up
    a Shugart disk image.  However, ICL's interpretation of the video hardware
    programming produces corrupted/inconsistent display.  Once that's debugged
    and a workaround devised, a PNX 2 image will be posted to the PERQmedia
    archive.

    1. Started work on the Micropolis 8" disk driver, attempting to build and
    test support for the "CIO Micropolis" configuration.  Without source code
    to PNX or ICL's POS R.4 modifications -- and no schematics or even a clear
    description of what the "ICL CIO" board or CIOShugart/CIOMicropolis disk
    support ACTUALLY MEANS -- it has proven impossible.  There are several
    different versions of the Micropolis code that are completely at odds with
    the available documentation and the EIO way of doing things; booting from
    floppy produces different results/installs different microcode that makes
    subsequent attempts to boot from the hard drive fail.  It's basically a
    complete disaster.  There's no point in continuing to bash my head on it.
    For now this means the "CIO" board ONLY supports Shugart 14" drives and the
    8" Micropolis will ONLY be supported on the PERQ-2 and PERQ-2/T1 models as
    the EIO board is developed.  If further exploration of the available media
    yields more information about the "CIO Micropolis" interface it can be
    added in later.  Bummer.


---
Last update: skeezics    Mon Nov 18 15:34:36 PST 2024
